#!/usr/bin/env python3

import argparse

arg = argparse.ArgumentParser();

arg.add_argument("--ramp-up", type=int, help="The time for ramp up, in seconds", default=20)
arg.add_argument("--ramp-down", type=int, help="The time for ramp down, in seconds", default=10)
arg.add_argument("--steady", type=int, help="The time for measurement, in seconds", default=60)

arg.add_argument("--interval-min", type=int, help="The minimum interval for request generation, in milliseconds", default=1000)
arg.add_argument("--interval-max", type=int, help="The maximum interval for request generation, in milliseconds", default=1500)
arg.add_argument("--interval-deviation", type=float, help="The deviation of the interval, in percentage.", default=0)
arg.add_argument("--interval-type", choices=["ThinkTime", "CycleTime"], help="The interval type.", default="ThinkTime")
arg.add_argument("--interval-distribution", choices=["Fixed", "Uniform", "NegExp"], help="The distribution of interval", default="Fixed")

arg.add_argument("--dataset-distribution", choices=["Random", "Zipfian"], help="The distribution of the request", default="Zipfian")
arg.add_argument("--output-query-result", "-q", action="store_true", help="Whether let Faban output search query. Can be a potential performance bottleneck.")

arg.add_argument("server_ip", help="The IP address of the server")
arg.add_argument("worker_count", help="The number of workers to generate requests")

arg = arg.parse_args()


# Load template
import os
FABAN_HOME = os.environ["FABAN_HOME"]

TEMPLATES: dict[str, str] = {}
HEADER: str = ""

with open(f"{FABAN_HOME}/search/template/head.java.in") as f:
    HEADER = f.read()

for dist in ["Random", "Zipfian"]:
    with open(f"{FABAN_HOME}/search/template/{dist}.java.in") as f:
        TEMPLATES[dist] = f.read()

# Generate SearchDriver.java
with open(f"{FABAN_HOME}/search/src/sample/searchdriver/SearchDriver.java", "x") as f:
    f.write("// this file is automatically generated by docker-entrypoint.py. DO NOT MODIFY. \n")
    f.write(HEADER)
    # Base on the interval type, start writing stuff.
    f.write("\n");

    if arg.interval_distribution == "Fixed":
        f.write("@FixedTime(cycleTime = {}, cycleType = CycleType.{}, cycleDeviation={})\n".format(
            arg.interval_min,
            arg.interval_type.upper(),
            arg.interval_deviation
        ))
        if arg.interval_min != arg.interval_max:
            print("Warning: the maximum interval should be same as the minimum interval when fixed distribution is used. The program uses minimum interval as the fixed interval.")
    elif arg.interval_distribution == "Uniform":
        f.write("@Uniform(cycleMin = {}, cycleMax = {}, cycleType = CycleType.{}, cycleDeviation = {})\n".format(
            arg.interval_min,
            arg.interval_max,
            arg.interval_type.upper(),
            arg.interval_deviation
        ))
    elif arg.interval_distribution == "NegExp":
        f.write("@NegativeExponential(cycleMin = {}, cycleMax = {}, cycleMean = {}, cycleType = CycleType.{}, cycleDeviation = {})\n".format(
            arg.interval_min,
            arg.interval_max,
            int((arg.interval_min * arg.interval_max) ** 0.5),
            arg.interval_type.upper(),
            arg.interval_deviation
        ))

    # Now write the load generator.
    assert arg.dataset_distribution in TEMPLATES

    content = TEMPLATES[arg.dataset_distribution]

    if arg.output_query_result:
        content = content.replace("System.out.println(sb.toString());", "")
    
    f.write(content)


import socket
import shutil

# Generate run.xml

RUN_XML_TEMPLATE: str = ""
with open(f"{FABAN_HOME}/search/template/run.xml.in") as f:
    RUN_XML_TEMPLATE = f.read()

with open(f"{FABAN_HOME}/search/deploy/run.xml", "w") as f:
    f.write(RUN_XML_TEMPLATE.format(
        SCALE = arg.worker_count,
        RAMP_UP_TIME = arg.ramp_up,
        RAMP_DOWN_TIME = arg.ramp_down,
        STEADY_TIME = arg.steady,
        FABAN_OUTPUT_DIR = os.environ["FABAN_OUTPUT_DIR"],
        AGENTS = "{}:{}".format(
            socket.gethostname(),
            os.environ["NUM_AGENTS"]
        ),
        SERVER_IP = arg.server_ip,
        PORT_NUMBER = os.environ["SOLR_PORT"],
        TERM_FILE = "{}/search/src/sample/searchdriver/{}".format(
            FABAN_HOME,
            "terms_ordered" if arg.dataset_distribution == "Zipfian" else "terms_random"
        )
    ))

# Setup the environment
os.environ["JAVA_HOME"] = os.path.dirname(os.path.dirname(os.path.realpath(shutil.which("javac"))))
os.environ["SOLR_JAVA_HOME"] = os.environ["JAVA_HOME"]

print(os.environ["JAVA_HOME"])

# Setup Faban
os.system(f"{FABAN_HOME}/master/bin/startup.sh")

# Update the build.properties with JDK 11.
os.system(f"sed -i 's/^compiler.target.version=.*/compiler.target.version=11/' {FABAN_HOME}/search/build.properties")

# Start building
os.chdir(f"{FABAN_HOME}/search")
os.system(f"{os.environ['ANT_HOME']}/bin/ant deploy")

CLASS_PATH = f"{FABAN_HOME}/lib/fabanagents.jar:{FABAN_HOME}/lib/fabancommon.jar:{FABAN_HOME}/lib/fabandriver.jar:{os.environ['JAVA_HOME']}/lib/tools.jar:{FABAN_HOME}/search/build/lib/search.jar"

os.environ["CLASSPATH"] = CLASS_PATH

import http.client
import time

con = http.client.HTTPConnection(arg.server_ip, os.environ["SOLR_PORT"])
while True:
    willConnect = True
    try:
        con.connect()
    except:
        willConnect = False
        print("-")
    
    if willConnect:
        # It is connected.
        con.close()
        break
    time.sleep(5)

# Register
os.system(f"java -classpath {CLASS_PATH} -Djava.security.policy={os.environ['POLICY_PATH']} com.sun.faban.common.RegistryImpl &")
time.sleep(3)

# Start Agent
os.system(f"java -classpath {CLASS_PATH} -Xmx{os.environ['CLIENT_HEAP_SIZE']} -Xms{os.environ['CLIENT_HEAP_SIZE']} -Djava.security.policy={os.environ['POLICY_PATH']} com.sun.faban.driver.engine.AgentImpl 'SearchDriver' {os.environ['AGENT_ID']} {socket.gethostname()} &")

# Start Master
os.system(f"java -classpath {CLASS_PATH} -Xmx{os.environ['CLIENT_HEAP_SIZE']} -Xms{os.environ['CLIENT_HEAP_SIZE']} -Djava.security.policy={os.environ['POLICY_PATH']} -Dbenchmark.config={os.environ['BENCHMARK_CONFIG']} com.sun.faban.driver.engine.MasterImpl")

time.sleep(4)

os.system(f"cat {os.environ['FABAN_OUTPUT_DIR']}/1/summary.xml")

